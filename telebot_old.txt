import nltk
import numpy as np
import string
import warnings
warnings.filterwarnings("ignore")
# from sklearn.feature_extraction.text import TfidfVectorizer
# from sklearn.metrics.pairwise import cosine_similarity
# f = open('content.txt','r',errors = 'ignore', encoding = 'utf-8')
# paragraph = f.read()
# nltk.download('punkt')   
# sent_tokens = nltk.sent_tokenize(paragraph)
# word_tokens = nltk.word_tokenize(paragraph)


# greetings = ['Hey', 'Hello', 'Hi', 'It"s great to see you', 'Nice to see you', 'Good to see you']
# bye = ['Bye', 'Bye-Bye', 'Goodbye', 'Have a good day','Stop']
# thank_you = ['Thanks', 'Thank you', 'Thanks a bunch', 'Thanks a lot.', 'Thank you very much', 'Thanks so much', 'Thank you so much']
# thank_response = ['You\'re welcome.' , 'No problem.', 'No worries.', ' My pleasure.' , 'It was the least I could do.', 'Glad to help.']
# def bot_initialize(user_msg):
#     if(user_msg in greetings):
#           return random.choice(greetings)
#     elif(user_msg in thank_you):
#           return random.choice(thank_response)
      
     
# lemmer = nltk.stem.WordNetLemmatizer()

# def LemTokens(tokens):
#     return [lemmer.lemmatize(token) for token in tokens]    
# remove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)

# def Normalize(text):
#     return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))

# def response(user_response):
#     robo_response = ''
#     sent_tokens.append(user_response)   
#     TfidfVec = TfidfVectorizer(tokenizer = Normalize, stop_words='english') 
#     tfidf = TfidfVec.fit_transform(sent_tokens)
#     vals = cosine_similarity(tfidf[-1], tfidf)
#     flat = vals.flatten()  
#     flat.sort()
#     req_tfidf = flat[-2] 
#     if(req_tfidf == 0):    
#         robo_response = robo_response + "I am sorry! I don't understand you. Please rephrase your query."
#         return robo_response
    
#     else:
#         robo_response = robo_response + sent_tokens[idx]   
#         return robo_response
    

# import random
# def bot_initialize(user_msg):
#     flag=True
#     while(flag==True):
#         user_response = user_msg
#         if(user_response not in bye):
#             if(user_response == '/start'):
#                 bot_resp = """Hi! There""" 
#                 return bot_resp
#             elif(user_response in thank_you):
#                 bot_resp = random.choice(thank_response)
#                 return bot_resp
#             elif(user_response in greetings):
#                 bot_resp = random.choice(greetings) + ", What information you what"
#                 return bot_resp
#             else:
#                 user_response = user_response.lower()
#                 bot_resp = response(user_response)
#                 sent_tokens.remove(user_response) 
#                 return bot_resp
#         else:
#             flag = False
#             bot_resp = random.choice(bye)
#             return bot_resp

def bot_initialize(user_msg):
    reply = "currently under construction"
    return reply
    

import requests
import json
class telegram_bot():
    def __init__(self):
        self.token = "1641823012:AAEqUcEKo3_3XuN-o2ST1TGwXrH8M2N8dsc"  
        self.url = f"https://api.telegram.org/bot{self.token}"
    def get_updates(self,offset=None):
        url = self.url+"/getUpdates?timeout=100"    
        if offset:
            url = url+f"&offset={offset+1}"
        url_info = requests.get(url)
        return json.loads(url_info.content)
    def send_message(self,msg,chat_id):
        url = self.url + f"/sendMessage?chat_id={chat_id}&text={msg}"
        if msg is not None:
            requests.get(url)
    def grab_token(self):
        return self.token
    
    
# main file 
tbot = telegram_bot()
update_id = None
def make_reply(msg):   
  
    if msg is not None:
        reply = bot_initialize(msg)    
    return reply
       
while True:
    print("...")
    updates = tbot.get_updates(offset=update_id)
    updates = updates['result']
    print(updates)
    if updates:
        for item in updates:
            update_id = item["update_id"]
            print(update_id)
            try:
                message = item["message"]["text"]
                print("Message :", message)
            except:
                message = None
                from_ = item["message"]["from"]["id"]
                print("ID: " , from_)
            from_ = item["message"]["from"]["id"]
            reply = make_reply(message)
            tbot.send_message(reply,from_)
            
            


